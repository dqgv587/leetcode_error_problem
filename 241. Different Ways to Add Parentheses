class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int> result;
        int sz=input.size();
        
        for(int i=0;i<sz;i++)
        {
            char c=input[i];
            if(c=='+'||c=='*'||c=='-')
            {
                vector<int> res1=diffWaysToCompute(input.substr(0,i));
                vector<int> res2=diffWaysToCompute(input.substr(i+1));
                for(int s:res1)
                {
                    for(int t:res2)
                    {
                        if(c=='+')
                        {
                            result.push_back(s+t);
                        }else if(c=='-')
                        {
                            result.push_back(s-t);
                        }
                        else
                        {
                            result.push_back(s*t);
                        }
                    }
                }
            }
        }
        if(result.empty())
        {
            result.push_back(stoi(input));
        }
        return result;
    }
};

Notes：分治法，以每个运算符为中心，分成两半递归求解，返回两个数组，进行交叉求解