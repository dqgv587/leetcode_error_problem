class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        int sz=nums.size();
        if(sz<=1)
        {
            return 0;
        }
        if(sz==2)
        {
            return nums[0]^nums[1];
        }
        int flag=0,maxs=0;
        unordered_set<int> s;
        for(int i=31;i>=0;i--)
        {
            flag|=(1<<i);
            s.clear();
            for(int j=0;j<sz;j++)
            {
                s.insert(nums[j]&flag);
            }
            int maxsnow=maxs|(1<<i);
            for(auto p:s)
            {
                if(s.find(maxsnow^p)!=s.end())
                {
                    maxs=maxsnow;
                    break;
                }
            }
        }
        return maxs;
    }
};

Notes：利用a^b=c,则a=b^c，b=a^c。
从二进制的第31位开始，根据当前的最大值，计算当前位的最大值。若有则更新max的值，没有则继续计算下一位的情况。
使用set记录当前二进制位的所有可能结果